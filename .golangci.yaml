linters-settings:
  dupl:
    threshold: 100
  funlen:
    lines: 100
    statements: 50
  goheader:
    values:
      const:
        COMPANY: VMware, Inc.
        LICENSE: Apache-2.0
      regexp:
        YEAR: 20\d*-*\d*
    template: |-
      Copyright {{ YEAR }} {{ COMPANY }} All Rights Reserved.
      SPDX-License-Identifier: {{ LICENSE }}
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  gocyclo:
    min-complexity: 15
  goimports:
    local-prefixes: github.com/vmware-tanzu
  govet:
    check-shadowing: true

  misspell:
    locale: US
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped
  whitespace:
    multi-func: true

linters:
  disable-all: true
  enable:
    - dogsled
    - dupl
    - errcheck
    - funlen
    - goconst
    - gocritic
    - gocyclo
    - goheader
    - goimports
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - misspell
    - nolintlint
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unused
    - whitespace
    - bodyclose
    - noctx
    - rowserrcheck
    - nakedret
    - revive
    - unparam

  # don't enable:
  # - asciicheck
  # - exhaustive
  # - gochecknoinits
  # - gochecknoglobals
  # - gocognit
  # - godot
  # - godox
  # - goerr113
  # - interfacer
  # - lll
  # - nestif
  # - prealloc
  # - testpackage
  # - scopelint
  # - wsl
  # - depguard  # This is not being used in the project hence do not enable
  # WARN [runner] The linter 'deadcode' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused.
  # - deadcode
  # WARN [runner] The linter 'structcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused.
  # - structcheck
  # WARN [runner] The linter 'varcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused.
  # - varcheck

issues:
  exclude:
    - 'declaration of "(err|ctx)" shadows declaration at'
    - "unnamedResult: consider giving a name to these results"
    - "(Expect directory permissions to be 0750 or less|Expect (WriteFile|file) permissions to be 0600 or less)"

  exclude-rules:
    - path: _test\.go
      linters:
        - dupl
        - gocritic
        - funlen
    - linters:
        - gocritic
      text: "unnecessaryDefer:"

    - linters:
        - revive
      text: "that stutters"

    - path: zz_.*\.go
      linters:
        - revive
      text: "it will be inferred from"

    # Ignore the deprecated function use (staticcheck, SA1019) for the test files
    - path: (.+)_test.go
      linters:
        - staticcheck
      text: "SA1019:"

  include:
    - EXC0011 # disable excluding of issues about missing package comments from stylecheck

  # Show all errors for all linters. Setting these to 0 disables limiting error reporting.
  max-same-issues: 0
  max-issues-per-linter: 0

run:
  skip-dirs:
    - fakes/
  timeout: 15m

# golangci.com configuration
# https://github.com/golangci/golangci/wiki/Configuration
service:
  golangci-lint-version: 1.46.0 # use the fixed version to not introduce new linters unexpectedly
