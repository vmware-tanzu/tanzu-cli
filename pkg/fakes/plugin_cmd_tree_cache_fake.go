// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/spf13/cobra"

	"github.com/vmware-tanzu/tanzu-cli/pkg/cli"
	"github.com/vmware-tanzu/tanzu-cli/pkg/plugincmdtree"
)

type CommandTreeCache struct {
	DeletePluginTreeStub        func(*cli.PluginInfo) error
	deletePluginTreeMutex       sync.RWMutex
	deletePluginTreeArgsForCall []struct {
		arg1 *cli.PluginInfo
	}
	deletePluginTreeReturns struct {
		result1 error
	}
	deletePluginTreeReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteTreeStub        func() error
	deleteTreeMutex       sync.RWMutex
	deleteTreeArgsForCall []struct {
	}
	deleteTreeReturns struct {
		result1 error
	}
	deleteTreeReturnsOnCall map[int]struct {
		result1 error
	}
	GetTreeStub        func(*cobra.Command, *cli.PluginInfo) (*plugincmdtree.CommandNode, error)
	getTreeMutex       sync.RWMutex
	getTreeArgsForCall []struct {
		arg1 *cobra.Command
		arg2 *cli.PluginInfo
	}
	getTreeReturns struct {
		result1 *plugincmdtree.CommandNode
		result2 error
	}
	getTreeReturnsOnCall map[int]struct {
		result1 *plugincmdtree.CommandNode
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CommandTreeCache) DeletePluginTree(arg1 *cli.PluginInfo) error {
	fake.deletePluginTreeMutex.Lock()
	ret, specificReturn := fake.deletePluginTreeReturnsOnCall[len(fake.deletePluginTreeArgsForCall)]
	fake.deletePluginTreeArgsForCall = append(fake.deletePluginTreeArgsForCall, struct {
		arg1 *cli.PluginInfo
	}{arg1})
	stub := fake.DeletePluginTreeStub
	fakeReturns := fake.deletePluginTreeReturns
	fake.recordInvocation("DeletePluginTree", []interface{}{arg1})
	fake.deletePluginTreeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CommandTreeCache) DeletePluginTreeCallCount() int {
	fake.deletePluginTreeMutex.RLock()
	defer fake.deletePluginTreeMutex.RUnlock()
	return len(fake.deletePluginTreeArgsForCall)
}

func (fake *CommandTreeCache) DeletePluginTreeCalls(stub func(*cli.PluginInfo) error) {
	fake.deletePluginTreeMutex.Lock()
	defer fake.deletePluginTreeMutex.Unlock()
	fake.DeletePluginTreeStub = stub
}

func (fake *CommandTreeCache) DeletePluginTreeArgsForCall(i int) *cli.PluginInfo {
	fake.deletePluginTreeMutex.RLock()
	defer fake.deletePluginTreeMutex.RUnlock()
	argsForCall := fake.deletePluginTreeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CommandTreeCache) DeletePluginTreeReturns(result1 error) {
	fake.deletePluginTreeMutex.Lock()
	defer fake.deletePluginTreeMutex.Unlock()
	fake.DeletePluginTreeStub = nil
	fake.deletePluginTreeReturns = struct {
		result1 error
	}{result1}
}

func (fake *CommandTreeCache) DeletePluginTreeReturnsOnCall(i int, result1 error) {
	fake.deletePluginTreeMutex.Lock()
	defer fake.deletePluginTreeMutex.Unlock()
	fake.DeletePluginTreeStub = nil
	if fake.deletePluginTreeReturnsOnCall == nil {
		fake.deletePluginTreeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePluginTreeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CommandTreeCache) DeleteTree() error {
	fake.deleteTreeMutex.Lock()
	ret, specificReturn := fake.deleteTreeReturnsOnCall[len(fake.deleteTreeArgsForCall)]
	fake.deleteTreeArgsForCall = append(fake.deleteTreeArgsForCall, struct {
	}{})
	stub := fake.DeleteTreeStub
	fakeReturns := fake.deleteTreeReturns
	fake.recordInvocation("DeleteTree", []interface{}{})
	fake.deleteTreeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CommandTreeCache) DeleteTreeCallCount() int {
	fake.deleteTreeMutex.RLock()
	defer fake.deleteTreeMutex.RUnlock()
	return len(fake.deleteTreeArgsForCall)
}

func (fake *CommandTreeCache) DeleteTreeCalls(stub func() error) {
	fake.deleteTreeMutex.Lock()
	defer fake.deleteTreeMutex.Unlock()
	fake.DeleteTreeStub = stub
}

func (fake *CommandTreeCache) DeleteTreeReturns(result1 error) {
	fake.deleteTreeMutex.Lock()
	defer fake.deleteTreeMutex.Unlock()
	fake.DeleteTreeStub = nil
	fake.deleteTreeReturns = struct {
		result1 error
	}{result1}
}

func (fake *CommandTreeCache) DeleteTreeReturnsOnCall(i int, result1 error) {
	fake.deleteTreeMutex.Lock()
	defer fake.deleteTreeMutex.Unlock()
	fake.DeleteTreeStub = nil
	if fake.deleteTreeReturnsOnCall == nil {
		fake.deleteTreeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteTreeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CommandTreeCache) GetTree(arg1 *cobra.Command, arg2 *cli.PluginInfo) (*plugincmdtree.CommandNode, error) {
	fake.getTreeMutex.Lock()
	ret, specificReturn := fake.getTreeReturnsOnCall[len(fake.getTreeArgsForCall)]
	fake.getTreeArgsForCall = append(fake.getTreeArgsForCall, struct {
		arg1 *cobra.Command
		arg2 *cli.PluginInfo
	}{arg1, arg2})
	stub := fake.GetTreeStub
	fakeReturns := fake.getTreeReturns
	fake.recordInvocation("GetTree", []interface{}{arg1, arg2})
	fake.getTreeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CommandTreeCache) GetTreeCallCount() int {
	fake.getTreeMutex.RLock()
	defer fake.getTreeMutex.RUnlock()
	return len(fake.getTreeArgsForCall)
}

func (fake *CommandTreeCache) GetTreeCalls(stub func(*cobra.Command, *cli.PluginInfo) (*plugincmdtree.CommandNode, error)) {
	fake.getTreeMutex.Lock()
	defer fake.getTreeMutex.Unlock()
	fake.GetTreeStub = stub
}

func (fake *CommandTreeCache) GetTreeArgsForCall(i int) (*cobra.Command, *cli.PluginInfo) {
	fake.getTreeMutex.RLock()
	defer fake.getTreeMutex.RUnlock()
	argsForCall := fake.getTreeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CommandTreeCache) GetTreeReturns(result1 *plugincmdtree.CommandNode, result2 error) {
	fake.getTreeMutex.Lock()
	defer fake.getTreeMutex.Unlock()
	fake.GetTreeStub = nil
	fake.getTreeReturns = struct {
		result1 *plugincmdtree.CommandNode
		result2 error
	}{result1, result2}
}

func (fake *CommandTreeCache) GetTreeReturnsOnCall(i int, result1 *plugincmdtree.CommandNode, result2 error) {
	fake.getTreeMutex.Lock()
	defer fake.getTreeMutex.Unlock()
	fake.GetTreeStub = nil
	if fake.getTreeReturnsOnCall == nil {
		fake.getTreeReturnsOnCall = make(map[int]struct {
			result1 *plugincmdtree.CommandNode
			result2 error
		})
	}
	fake.getTreeReturnsOnCall[i] = struct {
		result1 *plugincmdtree.CommandNode
		result2 error
	}{result1, result2}
}

func (fake *CommandTreeCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deletePluginTreeMutex.RLock()
	defer fake.deletePluginTreeMutex.RUnlock()
	fake.deleteTreeMutex.RLock()
	defer fake.deleteTreeMutex.RUnlock()
	fake.getTreeMutex.RLock()
	defer fake.getTreeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CommandTreeCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugincmdtree.Cache = new(CommandTreeCache)
